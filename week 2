#include <stdio.h>

int countOccurences(int arr[], int n, int key) {
    int first = -1, last = -1;
    // finding the first occurrence of key
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) {
            first = mid;
            high = mid - 1;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    if (first == -1) {
        return 0;
    }
    // finding the last occurrence of key
    low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) {
            last = mid;
            low = mid + 1;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return last - first + 1;
}

int main() {
    int T;
    scanf("%d", &T);
    for (int t = 1; t <= T; t++) {
        int n;
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        int key;
        scanf("%d", &key);
        int count = countOccurences(arr, n, key);
        if (count == 0) {
            printf("Key not present\n");
        } else {
            printf("%d %d\n", key, count);
        }
    }
    return 0;
}




2


#include <stdio.h>

int binary_search(int arr[], int l, int r, int x) {
    while (l <= r) {
        int mid = (l + r) / 2;
        if (arr[mid] == x) {
            return mid;
        } else if (arr[mid] < x) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    return -1;
}

void find_triplet(int arr[], int n) {
    int found = 0;
    for (int i = 0; i < n-2; i++) {
        for (int j = i+1; j < n-1; j++) {
            int sum = arr[i] + arr[j];
            int k = binary_search(arr, j+1, n-1, sum);
            if (k != -1) {
                printf("%d %d %d\n", i, j, k);
                found = 1;
                break;
            }
        }
        if (found) {
            break;
        }
    }
    if (!found) {
        printf("No sequence found\n");
    }
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int n;
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        find_triplet(arr, n);
    }
    return 0;
}







3



#include <stdio.h>

int main() {
    int arr[] = {2, 5, 7, 8, 10, 12};
    int n = sizeof(arr) / sizeof(arr[0]);
    int i, j, k;

    for (i = 0; i < n - 2; i++) {
        j = i + 1;
        k = j + 1;
        while (k < n) {
            if (arr[k] == arr[i] + arr[j]) {
                printf("Indices: %d, %d, %d\n", i, j, k);
                return 0;
            } else if (arr[k] > arr[i] + arr[j]) {
                j++;
            } else {
                k++;
            }
        }
    }

    printf("No such triplet exists.\n");
    return 0;
}








