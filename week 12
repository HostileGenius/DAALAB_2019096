
1


#include <iostream>
#include <string>
#include <vector>

using namespace std;

string findLCS(string sequence1, string sequence2) {
    int m = sequence1.length();
    int n = sequence2.length();
    
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (sequence1[i - 1] == sequence2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    
    string lcs;
    int i = m, j = n;
    
    while (i > 0 && j > 0) {
        if (sequence1[i - 1] == sequence2[j - 1]) {
            lcs = sequence1[i - 1] + lcs;
            i--;
            j--;
        } else if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }
    
    return lcs;
}

int main() {
    string sequence1, sequence2;
    cout << "Enter sequence 1: ";
    getline(cin, sequence1);
    cout << "Enter sequence 2: ";
    getline(cin, sequence2);
    
    string lcs = findLCS(sequence1, sequence2);
    
    cout << "Longest Common Subsequence: " << lcs << endl;
    cout << "Length of LCS: " << lcs.length() << endl;
    
    return 0;
}






2



#include <iostream>
#include <vector>

using namespace std;

struct Item {
    int weight;
    int value;
};

void findKnapsackItems(int n, const vector<int>& weights, const vector<int>& values, int capacity) {
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));
    
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= capacity; j++) {
            if (weights[i - 1] <= j) {
                dp[i][j] = max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    
    int maxValue = dp[n][capacity];
    vector<Item> selectedItems;
    
    int i = n, j = capacity;
    while (i > 0 && j > 0) {
        if (dp[i][j] != dp[i - 1][j]) {
            selectedItems.push_back({weights[i - 1], values[i - 1]});
            j -= weights[i - 1];
        }
        i--;
    }
    
    reverse(selectedItems.begin(), selectedItems.end());
    
    cout << "Maximum Value: " << maxValue << endl;
    cout << "Selected Items:" << endl;
    for (const auto& item : selectedItems) {
        cout << "Weight: " << item.weight << ", Value: " << item.value << endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;
    
    vector<int> weights(n);
    vector<int> values(n);
    
    cout << "Enter the weights of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> weights[i];
    }
    
    cout << "Enter the values of the items: ";
    for (int i = 0; i < n; i++) {
        cin >> values[i];
    }
    
    int capacity;
    cout << "Enter the knapsack capacity: ";
    cin >> capacity;
    
    findKnapsackItems(n, weights, values, capacity);
    
    return 0;
}







3




#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

void generatePermutations(string sortedString, string prefix, vector<string>& permutations) {
    if (sortedString.empty()) {
        permutations.push_back(prefix);
        return;
    }
    
    for (int i = 0; i < sortedString.length(); i++) {
        string newPrefix = prefix + sortedString[i];
        string newSortedString = sortedString.substr(0, i) + sortedString.substr(i + 1);
        generatePermutations(newSortedString, newPrefix, permutations);
    }
}

int main() {
    string input;
    cout << "Enter a string: ";
    cin >> input;
    
    sort(input.begin(), input.end());
    
    vector<string> permutations;
    generatePermutations(input, "", permutations);
    
    cout << "Permutations in lexicographic order:" << endl;
    for (const string& permutation : permutations) {
        cout << permutation << endl;
    }
    
    return 0;
}


